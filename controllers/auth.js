const User = require('../models/user')
const { validationResult } = require('express-validator')
const jwt = require('jsonwebtoken')
const jwtExpress = require('express-jwt')

exports.signup = (req, res) => {
  //express binds the validation result along the request body
  const error = validationResult(req)
  //validationresult returns an array of objects so we use isEmpty to check wether the array is empty or Not
  if (!error.isEmpty()) {
    return res.status(422).json({
      //error.array()-converts error object to an array
      errors: error.array()[0].msg,
      params: error.array()[0].param,
    })
  }

  //  const { firstname, email, password } = req.body

  // const user = new User({
  //  firstname,
  // email,
  //password: password, //password refers to virtual refered name
  //})

  const user = new User(req.body)
  user.save((errors, result) => {
    if (errors) {
      return res.status(400).json({
        errors: 'Invalid/Existing Details',
      })
    }
    res.status(200).json({
      id: result._id,
      firstName: result.firstname,
      email: result.email,
      password: result.encry_password,
      
    })
  })
}

exports.signin = (req, res) => {
  const { email, password } = req.body
  const error = validationResult(req)
  if (!error.isEmpty()) {
    return res.status(422).json({
      error: error.array()[0].msg,
    })
  }
  User.findOne({ email }, (err, result) => {
    if (err || !result) {
      return res.status(400).json({
        error: 'Incorrect Email/Password',
      })
    }
    if (!result.authenticate(password)) {
      return res.status(401).json({
        error: 'Incorrect Email/Password',
      })
    }
    //token creation
    const token = jwt.sign({ _id: result._id }, process.env.SECRET_KEY)
    //storing token in cookie
    res.cookie('token', token, { expire: new Date() + 9999 })
    //sending response t frontend
  
      const { _id, email, firstname, survey, lastname } = result
      return res.json({ token, user: { survey,_id, email, firstname,lastname } })
    
  })
}

exports.signout = (req, res) => {
  res.clearCookie('token')
  res.send('User SignedOut')
}

//protected routed using express-jwt
exports.isSignedIn = jwtExpress({
  secret: process.env.SECRET_KEY,
  userProperty: 'auth', //it works on request,we can name it anything,whenever i need this we can check the userproperty presents with exact name by req.propertyname("auth") which returns the id which is the id generated by mondgodb
})


//custom middlewares
//exports.isAuthenticated-it ensures that user is logged in and alllowed to make changes only in his account
exports.isAuthenticated = (req, res, next) => {
  //req.profile-it is setted from frontend only when the user is loggedIn that is if the user has id,enail,role the this property is setted from frontend
  //req.auth-it is obtained from express-jwt when it is passed as middle ware
  let checker = req.profile && req.auth && req.profile._id == req.auth._id
  if (!checker) {
    return res.status(403).json({ error: 'ACCESS DENIED' })
  }
  next()
}



exports.getUserById = (req, res, next, id) => {
  User.findById(id).exec((err, user) => {
    if (err || !user) {
      return res.status(400).json({ error: 'No User Found' })
    }
    req.profile = user //user data is stored in request object of the params-middleware named as profile
    next()
  })
}